<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!--Spring的配置-->

    <!-- 扫描所有的包-->
    <context:component-scan base-package="com.njcit">
        <!-- 除了Controller的包不扫描，其他的包都扫描-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 引入jdbc.properties的配置-->
    <context:property-placeholder location="classpath:JDBC.properties"/>
    <!--配置数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driver}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${username}"/>
        <property name="password" value="${password}"/>

        <!-- 连接池的最大连接数-->
        <property name="maxPoolSize" value="20"/>
        <!-- 连接池的最小连接数-->
        <property name="minPoolSize" value="2"/>
        <!-- 初始化连接数-->
        <property name="initialPoolSize" value="2"/>
        <!-- 最大等待时间-->
        <property name="maxConnectionAge" value="6000"/>
        <!-- 连接池最大空闲-->
        <property name="maxIdleTime" value="60"/>
    </bean>


    <!-- 开始整合配置-->

    <!-- 配置和Mybatis的整合，创建sqlsessionfactory-->
    <bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定mybatis的全局配置文件的配置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 配置mapper的指定文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- 配置扫描器,将mybatis的接口的实现DAO层放到IOC的容器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描所有的DAO层接口，放到IOC容器-->
        <property name="basePackage" value="com.njcit.dao"/>
    </bean>

    <!-- 结束整合配置-->

    <!-- 配置可以执行批量的sqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>

    <!-- 对数据源的事务的管理 -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 开启基于注解的事务管理(service层)  -->
    <aop:config>
        <aop:pointcut expression="execution(* com.njcit.service..*(..))" id="txPoint"/>
        <!-- 配置事务增强 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!-- 配置事务增强-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 所有方法都是事务方法 -->
            <tx:method name="*"/>
            <!-- 以get开始的所有方法 -->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

</beans>